# -*- coding: utf-8 -*-
"""Interactive Regression App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12s1rH5DeM1-BRmuxCzFkS-q0h2N-sj7Q
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
import statsmodels.api as sm

# --- Helper Functions (Adapted from your code) ---

def run_simple_linear_regression(data, feature_col, target_col):
    """Performs simple linear regression and returns plots."""
    try:
        x = data[[feature_col]].values
        y = data[[target_col]].values

        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

        regressor = LinearRegression()
        regressor.fit(x_train, y_train)

        # --- Visualization ---
        st.subheader("Results")

        # Training set plot
        fig1, ax1 = plt.subplots()
        ax1.scatter(x_train, y_train, color='red', label='Actual Data')
        ax1.plot(x_train, regressor.predict(x_train), color='blue', label='Regression Line')
        ax1.set_title('Salary vs Experience (Training Set)')
        ax1.set_xlabel(feature_col)
        ax1.set_ylabel(target_col)
        ax1.legend()
        st.pyplot(fig1)

        # Test set plot
        fig2, ax2 = plt.subplots()
        ax2.scatter(x_test, y_test, color='green', label='Actual Test Data')
        ax2.plot(x_train, regressor.predict(x_train), color='orange', label='Regression Line (from Training)')
        ax2.set_title('Salary vs Experience (Test Set)')
        ax2.set_xlabel(feature_col)
        ax2.set_ylabel(target_col)
        ax2.legend()
        st.pyplot(fig2)

    except Exception as e:
        st.error(f"An error occurred: {e}")
        st.error("Please ensure you have selected one numeric feature and one numeric target column.")


def run_multiple_linear_regression(data, feature_cols, target_col, categorical_cols):
    """Performs multiple linear regression and shows results."""
    try:
        x = data[feature_cols].values
        y = data[[target_col]].values

        # Find the index of categorical columns for the transformer
        categorical_indices = [feature_cols.index(col) for col in categorical_cols]

        # --- Preprocessing ---
        ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), categorical_indices)], remainder='passthrough')
        x = np.array(ct.fit_transform(x))

        # Avoid dummy variable trap (optional but good practice)
        x = x[:, 1:]

        # --- Model Training ---
        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)
        regressor = LinearRegression()
        regressor.fit(x_train, y_train)

        # --- Predictions ---
        st.subheader("Test Set Predictions vs Actual")
        predictions = regressor.predict(x_test)
        results_df = pd.DataFrame({'Predicted': predictions.flatten(), 'Actual': y_test.flatten()})
        st.dataframe(results_df)

        # --- Backward Elimination using statsmodels ---
        st.subheader("Model Optimization with Backward Elimination")
        st.write("This process removes the least significant features to build a more optimal model.")

        # Add column of ones for the intercept
        x_with_const = sm.add_constant(x.astype(np.float64))

        model_ols = sm.OLS(endog=y, exog=x_with_const).fit()
        st.text("Initial Model Summary (All Features):")
        st.text(str(model_ols.summary()))

        st.info("The goal is to remove features with a P-value > 0.05 (a common significance level). This part of the app demonstrates the concept but does not yet automate the full iterative removal process.")

    except Exception as e:
        st.error(f"An error occurred: {e}")
        st.error("Please ensure your column selections are appropriate for multiple regression.")


# --- Streamlit App UI ---

st.set_page_config(layout="wide")
st.title("Interactive Linear Regression Tool")

st.write("Upload your own CSV data and perform simple or multiple linear regression.")

# --- 1. File Upload ---
uploaded_file = st.sidebar.file_uploader("Upload your CSV file", type=["csv"])

if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
    st.sidebar.success("File uploaded successfully!")
    st.subheader("Data Preview")
    st.dataframe(data.head())

    # --- 2. Model Selection ---
    model_type = st.sidebar.selectbox(
        "Choose a Regression Model",
        ("Simple Linear Regression", "Multiple Linear Regression")
    )

    st.sidebar.header(f"Configure {model_type}")

    if model_type == "Simple Linear Regression":
        feature_col = st.sidebar.selectbox("Select the Feature (X) column:", data.columns)
        target_col = st.sidebar.selectbox("Select the Target (Y) column:", data.columns)

        if st.sidebar.button("Run Simple Regression"):
            run_simple_linear_regression(data, feature_col, target_col)

    elif model_type == "Multiple Linear Regression":
        all_columns = data.columns.tolist()
        target_col = st.sidebar.selectbox("Select the Target (Y) column:", all_columns)

        # Filter out the target column from feature choices
        available_features = [col for col in all_columns if col != target_col]
        feature_cols = st.sidebar.multiselect("Select the Feature (X) columns:", available_features)

        # Identify potential categorical columns
        potential_cats = [col for col in feature_cols if data[col].dtype == 'object']
        categorical_cols = st.sidebar.multiselect(
            "Select Categorical Feature(s) to encode:",
            potential_cats,
            help="Select columns with text categories (e.g., 'State', 'Country'). The app will one-hot encode them."
        )

        if st.sidebar.button("Run Multiple Regression"):
            if not feature_cols:
                st.warning("Please select at least one feature column.")
            else:
                run_multiple_linear_regression(data, feature_cols, target_col, categorical_cols)

else:
    st.info("Awaiting CSV file upload.")